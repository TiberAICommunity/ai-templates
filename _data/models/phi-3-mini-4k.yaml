name: Phi-3-mini-4k
title: Phi-3 mini 4k
model_id: microsoft/Phi-3-mini-4k-instruct
description: "Microsoft's Phi-3-mini-4k Instruct model running on Text Generation Inference (TGI). A compact yet powerful model optimized for reasoning, coding, and structured tasks."

license_notice: "Before using this model, please review the license terms and usage rights on the Hugging Face model page."

# System Requirements and Scaling
requirements:
  minimum:
    - "Intel Data Center GPU Max (PVC)"
    - "Ubuntu 22.04 LTS"
    - "32GB System RAM"
    - "100GB Storage"
    - "Docker & Docker Compose"
  recommended:
    - "64GB+ System RAM for larger models"
    - "Multiple GPUs for running multiple models"

scaling_options:
  - "Single GPU: One model per GPU"
  - "Multi-GPU: Deploy different models on separate GPUs"
  - "Load Balancing: Automatic GPU selection based on availability"

additional_resources:
  - title: "GitHub Repository"
    url: "https://github.com/tiberaicommunity/xpu_tgi"
    description: "Source code and detailed documentation"
    features:
      - "Manual deployment guides"
      - "Multi-model deployment"
      - "Advanced configuration options"
      - "Troubleshooting guides"

  - title: "Advanced Use Cases"
    description: "Check the repository for:"
    items:
      - "Custom model configuration"
      - "Multiple model deployments"
      - "GPU management strategies"
      - "Production deployment guides"

deployment_modes:
  - title: "Quick Deploy"
    description: "Single command deployment (recommended for single models)"
    suitable_for: ["Testing", "Single model deployments", "Quick evaluation"]

  - title: "Manual Deploy"
    description: "Step-by-step deployment from repository"
    suitable_for: ["Multiple models", "Custom configurations", "Production setups"]
    link: "https://github.com/tiberaicommunity/xpu_tgi#manual-deployment"

# TGI specific configuration
tgi: true
architecture_diagram: |
  flowchart LR
      Client([Client])
      Traefik[Traefik Proxy]
      Auth[Auth Service]
      TGI[TGI Service]

      Client --> Traefik
      Traefik --> Auth
      Auth --> Traefik
      Traefik --> TGI
      TGI --> Traefik
      Traefik --> Client

      subgraph Internal["Internal Network"]
          Traefik
          Auth
          TGI
      end

key_features:
  - "üîí Token-based authentication with automatic ban after failed attempts"
  - "üö¶ Rate limiting (global: 10 req/s, per-IP: 10 req/s)"
  - "üõ°Ô∏è Security headers and IP protection"
  - "üîÑ Health monitoring and automatic recovery"
  - "üöÄ Optimized for Intel GPUs"

# Model specific information
context_window: "4096 tokens"
strengths:
  - "Code generation"
  - "Step-by-step reasoning"
  - "Math problems"
  - "Technical explanations"

use_cases:
  - "Writing and debugging code"
  - "Solving mathematical problems"
  - "Explaining technical concepts"
  - "Logical reasoning tasks"

deployment_steps:
  - title: "1. Setup Prerequisites"
    description: "Create Intel Tiber AI Cloud account and select GPU Max VM"
    link: "https://cloud.intel.com"
    link_text: "Visit Intel Cloud Portal"

  - title: "2. Quick Deploy (Recommended)"
    description: "Deploy the model with a single command"
    code: |
      curl -sSL https://raw.githubusercontent.com/tiberaicommunity/xpu_tgi/main/quick-deploy.sh \
        | bash -s -- Phi-3-mini-4k

  - title: "3. Access Options"
    description: "Multiple ways to access your deployed model (GPU number is automatically assigned, typically starting with gpu0)"
    code: |
      # Local Access (same machine):
      curl -X POST http://localhost:8000/phi-3-mini-4k/gpu0/generate \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"inputs": "Hello, how are you?"}'

      # Remote Access (evaluation only):
      ./tunnel.sh  # Creates temporary public URL
      # Then use: https://YOUR-TUNNEL-URL/phi-3-mini-4k/gpu0/generate

      # SSH Tunnel (recommended):
      ssh -L 8000:localhost:8000 -J guest@guest-ip user@your-vm-ip
      # Then use: http://localhost:8000/phi-3-mini-4k/gpu0/generate

  - title: "4. Managing Services"
    description: "Control and monitor your deployment"
    code: |
      # Check status
      ./tgi-status.sh

      # Stop services
      ./service_cleanup.sh --all     # Stop all services
      ./service_cleanup.sh --gpu N   # Stop specific GPU

examples:
  - title: "Code Generation"
    code: |
      curl -X POST http://localhost:8000/phi-3-mini-4k/gpu0/generate \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H 'Content-Type: application/json' \
        -d '{
          "inputs": "Write a Python function that calculates the factorial of a number. Include comments explaining the logic:",
          "parameters": {
            "max_new_tokens": 150,
            "temperature": 0.2
          }
        }'

  - title: "Step-by-Step Math"
    code: |
      curl -X POST http://localhost:8000/phi-3-mini-4k/gpu0/generate \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H 'Content-Type: application/json' \
        -d '{
          "inputs": "Solve step by step: A store offers a 15% discount on a $80 item. What is the final price after tax if the tax rate is 8%?",
          "parameters": {
            "max_new_tokens": 200,
            "temperature": 0.1
          }
        }'

best_practices:
  - "Use temperature 0.1-0.2 for code and math"
  - "Include 'step by step' for complex problems"
  - "For coding tasks, specify programming language, desired functionality, and any specific requirements"
  - "Break down complex queries into smaller, logical steps"

# Tags for filtering
tags:
  - label: "Transformer"
    color: "#3B82F6"
  - label: "4K context"
    color: "#10B981"
  - label: "Instruction"
    color: "#8B5CF6"
  - label: "TGI"
    color: "#EF4444"
