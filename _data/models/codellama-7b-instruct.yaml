name: codellama-7b-instruct
title: CodeLlama 7B Instruct
model_id: codellama/CodeLlama-7b-instruct
description: "Meta's CodeLlama 7B Instruct model running on Text Generation Inference (TGI). Specialized for code generation and understanding across multiple programming languages. For multi-GPU deployments and advanced configurations, please visit our GitHub repository."

license_notice: "This model is available under the Llama 2 Community License. Before using this model, please review the complete license, accept Meta's Llama 2 License, and ensure compliance with usage terms and conditions. This deployment supports single and multi-GPU setups - see <a href='https://github.com/tiberaicommunity/xpu_tgi' target='_blank'>our repository</a> for advanced deployment options."

context_window: "4096 tokens"
hardware_required: "Intel Max Series GPU (1100) VM - supports single/multi GPU deployments"

strengths:
  - "Code generation"
  - "Code understanding"
  - "Code modification"
  - "Multi-language support"

use_cases:
  - "Code completion"
  - "Bug fixing"
  - "Code explanation"
  - "Documentation generation"
  - "Code review suggestions"

tgi: true
architecture_diagram: |
  flowchart LR
      Client([Client])
      Traefik[Traefik Proxy]
      Auth[Auth Service]
      TGI[TGI Service]

      Client --> Traefik
      Traefik --> Auth
      Auth --> Traefik
      Traefik --> TGI
      TGI --> Traefik
      Traefik --> Client

      subgraph Internal["Internal Network"]
          Traefik
          Auth
          TGI
      end

key_features:
  - "üîí Token-based authentication with automatic ban after failed attempts"
  - "üö¶ Rate limiting (global: 10 req/s, per-IP: 10 req/s)"
  - "üõ°Ô∏è Security headers and IP protection"
  - "üîÑ Health monitoring and automatic recovery"
  - "üöÄ Optimized for Intel GPUs with multi-GPU support"

deployment_steps:
  - title: "1. Setup Prerequisites"
    description: "Create Intel Tiber AI Cloud account and select GPU Max VM, and connect to your instance."
    link: "https://cloud.intel.com"
    link_text: "Visit Intel Cloud Portal"

  - title: "2. Quick Deploy (Recommended)"
    description: "Deploy the model with a single command (see repository for multi-GPU deployments)"
    code: |
      curl -sSL https://raw.githubusercontent.com/tiberaicommunity/xpu_tgi/main/quick-deploy.sh \
        | bash -s -- CodeLlama-7b

  - title: "3. Try Demo UI"
    description: "Launch the demo UI and API documentation interface"
    code: |
      bash ~/xpu_tgi/deploy_ui.sh

  - title: "4. Access Options"
    description: "Multiple ways to access your deployed model (GPU number is automatically assigned, typically starting with gpu0)"
    collapsed: true
    code: |
      # Local Access (same machine):
      curl -X POST http://localhost:8000/codellama-7b-instruct/gpu0/generate \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"inputs": "Write a Python function to implement binary search:"}'

      # Remote Access (evaluation only):
      ./tunnel.sh  # Creates temporary public URL
      # Then use: https://YOUR-TUNNEL-URL/codellama-7b-instruct/gpu0/generate

      # SSH Tunnel (recommended):
      ssh -L 8000:localhost:8000 -J guest@guest-ip user@your-vm-ip
      # Then use: http://localhost:8000/codellama-7b-instruct/gpu0/generate

  - title: "5. Managing Services"
    description: "Control and monitor your deployment"
    collapsed: true
    code: |
      # Check status
      ./tgi-status.sh

      # Stop services
      ./service_cleanup.sh                    # Stop all services
      ./service_cleanup.sh --gpu N (or all)   # Stop specific GPU or all GPUs

tags:
  - label: "Transformer"
    color: "#3B82F6"
  - label: "4K context"
    color: "#10B981"
  - label: "Instruction"
    color: "#8B5CF6"
  - label: "TGI"
    color: "#EF4444"
  - label: "Meta"
    color: "#0EA5E9"
  - label: "LLaMA"
    color: "#F59E0B"
  - label: "Code"
    color: "#EC4899"
